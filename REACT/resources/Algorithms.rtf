{\rtf1\ansi\ansicpg1252\cocoartf1504\cocoasubrtf830
{\fonttbl\f0\fswiss\fcharset0 Helvetica;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\paperw11900\paperh16840\margl1440\margr1440\vieww10800\viewh8400\viewkind0
\pard\tx566\tx1133\tx1700\tx2267\tx2834\tx3401\tx3968\tx4535\tx5102\tx5669\tx6236\tx6803\pardirnatural\partightenfactor0

\f0\fs24 \cf0 \

\b\fs30 BINARY SORT
\b0\fs24 \
\
lower_bound = 0\
upper_bound = array.length -1\
\

\b while
\b0  lower_bound <= upper_bound do\
\
midpoint = (int) (upper_bound + lower_bound) / 2\
value_at_midpoint = array[midpoint]\
\

\b if
\b0  value < value value_at_midpoint\
   upper_bound = midpoint - 1\
\

\b else
\b0  value > value_at_midpoint\
   lower_bound\
\

\b else
\b0  value == value_at_midpoint\
   
\b return
\b0  midpoint\
\
\
JAVA\
\
int low = 0;\
int high = array.size()-1;\
\
while (low <= high)\
\{    int mid = (low + high) / 2;\
     Arrayobject midVal = seats.get(mid);\
\
     int cmp = midVal.getSeatNumber().compareTo(seatNumber);\
\
     if (cmp < 0)\
\{    low = mid + 1;  \}\
\
  else if (cmp > 0)\
\{    high = mid -1;  \}\
\
    else \
\{    return array.get(mid).reserve();  \}\
\
return false\
\
\
}